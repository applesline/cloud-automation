apiVersion: batch/v1
kind: Job
metadata:
  name: data-ingestion
spec:
  template:
    metadata:
      labels:
        app: gen3job
    spec:
      volumes:
      # - name: config-volume
      #   configMap:
      #     name: manifest-global
      - name: data-ingestion-job-secret
        secret:
          secretName: data-ingestion-job-secret
      - name: phs-id-list
        configMap:
          name: phs-id-list
      containers:
        # - name: fence
        #   image: quay.io/cdis/fence:master
        #   imagePullPolicy: Always
        #   env:
        #     - name: PYTHONPATH
        #       value: /var/www/fence
        #   volumeMounts:
        #     - name: "config-volume"
        #       readOnly: true
        #       mountPath: "/var/www/fence/fence-config.yaml"
        #       subPath: fence-config.yaml
        #     - name: "fence-google-app-creds-secret-volume"
        #       readOnly: true
        #       mountPath: "/var/www/fence/fence_google_app_creds_secret.json"
        #       subPath: fence_google_app_creds_secret.json
        #     - name: "fence-google-storage-creds-secret-volume"
        #       readOnly: true
        #       mountPath: "/var/www/fence/fence_google_storage_creds_secret.json"
        #       subPath: fence_google_storage_creds_secret.json
        #     - name: "fence-yaml"
        #       mountPath: "/var/www/fence/user.yaml"
        #       subPath: user.yaml
        #   imagePullPolicy: Always
        - name: data-ingestion-pipeline
          image: quay.io/cdis/datastage-data-ingestion:feat_data-ingestion-pipeline
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          env:
            - name: CREDS_JSON
              valueFrom:
                secretKeyRef:
                  name: data-ingestion-job-secret
                  key: config.json
          volumeMounts:
          - name: phs-id-list
            readOnly: true
            mountPath: /phs-id-list
          command: ["/bin/bash" ]
          args:
            - "-c"
            - |
              ./run.sh

              if [ -f "scripts/google-groups.sh" ]; then
                  echo "google-groups.sh contains:"
                  cat scripts/google-groups.sh
              else
                echo "Error: google groups generation script is not present."
              fi

              echo "scripts/output:"
              ls scripts/output


      restartPolicy: Never