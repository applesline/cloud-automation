apiVersion: batch/v1
kind: Job
metadata:
  name: data-ingestion
spec:
  template:
    metadata:
      labels:
        app: gen3job
    spec:
      restartPolicy: Never
      volumes:
        - name: shared-data
          emptyDir: {}
        - name: data-ingestion-job-secret
          secret:
            secretName: data-ingestion-job-secret
        - name: phs-id-list
          configMap:
            name: phs-id-list
        - name: data-requiring-manual-review
          configMap:
            name: data-requiring-manual-review
            optional: true
        - name: old-config-volume
          secret:
            secretName: "fence-secret"
        - name: json-secret-volume
          secret:
            secretName: "fence-json-secret"
        - name: creds-volume
          secret:
            secretName: "fence-creds"
        - name: config-helper
          configMap:
            name: config-helper
        - name: config-volume
          secret:
            secretName: "fence-config"
        - name: fence-google-app-creds-secret-volume
          secret:
            secretName: "fence-google-app-creds-secret"
        - name: fence-google-storage-creds-secret-volume
          secret:
            secretName: "fence-google-storage-creds-secret"
      containers:
        - name: data-ingestion-pipeline
          image: quay.io/cdis/datastage-data-ingestion:feat_data-ingestion-pipeline
          imagePullPolicy: Always
          ports:
            - containerPort: 80
          env:
            - name: CREDS_JSON
              valueFrom:
                secretKeyRef:
                  name: data-ingestion-job-secret
                  key: config.json
          volumeMounts:
            - name: shared-data
              mountPath: /this-directory-is-shared-with-fence
            - name: phs-id-list
              readOnly: true
              mountPath: /phs-id-list
            - name: data-requiring-manual-review
              readOnly: true
              mountPath: /data-requiring-manual-review
          command: ["/bin/bash" ]
          args:
            - "-c"
            - |
              ./run.sh

              if [ -f "scripts/joindure/output/google-groups.sh" ]; then
                  echo "google-groups.sh contains:"
                  cat scripts/joindure/output/google-groups.sh
              else
                echo "Error: google groups generation script is not present."
              fi

              echo "scripts/joindure/output:"
              ls scripts/joindure/output

              cp -R scripts/joindure/output/. /this-directory-is-shared-with-fence/.
        - name: fence
          image: quay.io/cdis/fence:master
          imagePullPolicy: Always
          env:
            - name: PYTHONPATH
              value: /var/www/fence
          volumeMounts:
            - name: shared-data
              mountPath: /data-ingestion-pipeline-output
            - name: "config-volume"
              readOnly: true
              mountPath: "/var/www/fence/fence-config.yaml"
              subPath: fence-config.yaml
            - name: "fence-google-app-creds-secret-volume"
              readOnly: true
              mountPath: "/var/www/fence/fence_google_app_creds_secret.json"
              subPath: fence_google_app_creds_secret.json
            - name: "fence-google-storage-creds-secret-volume"
              readOnly: true
              mountPath: "/var/www/fence/fence_google_storage_creds_secret.json"
              subPath: fence_google_storage_creds_secret.json
          command: ["/bin/bash" ]
          args:
            - "-c"
            - |
              while true; do
                  files=( /data-ingestion-pipeline-output/* )
                  (( ${#files[@]} >= 3 )) && break
                  sleep 5s
              done

              echo 'Received output from data-ingestion-pipeline:'
              ls /data-ingestion-pipeline-output/

              EXISTING_GOOGLE_GROUPS_FILE="google_list_authz_groups_output.txt"
              GOOGLE_GROUP_CREATE_SCRIPT_FILE="/data-ingestion-pipeline-output/google-groups.sh"
              GOOGLE_GROUP_CREATE_SCRIPT_PRUNED_FILE="google-groups-pruned.sh"

              fence-create google-list-authz-groups > $EXISTING_GOOGLE_GROUPS_FILE

              EXISTING_GROUPS=( )
              FOUND_GROUP_HEADER=0
              while IFS= read -r line || [ -n "$line" ]; do
                if [ $FOUND_GROUP_HEADER == 1 ]; then
                  line_split=(${line//,/ })
                  EXISTING_GROUPS+=("${line_split[1]}")
                fi

                if [ "$line" == 'GoogleBucketAccessGroup.email, Bucket.name, Project.auth_id' ]; then
                  FOUND_GROUP_HEADER=1
                fi
              done < "$EXISTING_GOOGLE_GROUPS_FILE"

              NON_EXISTING_GROUPS=( )
              while IFS= read -r line || [ -n "$line" ]; do
                prune_this_group=0
                for i in "${EXISTING_GROUPS[@]}"; do
                    if [[ $line == *"$i"* ]]; then
                      prune_this_group=1
                      echo "The group $i already exists. Skipping."
                      break
                    fi
                done
                if [ $prune_this_group == 0 ]; then
                  NON_EXISTING_GROUPS+=("$line")
                fi
              done < "$GOOGLE_GROUP_CREATE_SCRIPT_FILE"

              rm $GOOGLE_GROUP_CREATE_SCRIPT_PRUNED_FILE
              printf "%s\n" "${NON_EXISTING_GROUPS[@]}" > $GOOGLE_GROUP_CREATE_SCRIPT_PRUNED_FILE

              echo "Pruned google groups commands:"
              cat $GOOGLE_GROUP_CREATE_SCRIPT_PRUNED_FILE

              chmod +x $GOOGLE_GROUP_CREATE_SCRIPT_PRUNED_FILE
              # TODO: uncomment this line
              # ./$GOOGLE_GROUP_CREATE_SCRIPT_PRUNED_FILE


